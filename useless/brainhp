<?php

//use Exception;

# Define globals
##############################
$regex[0] = '( +|\t+|^)';
$regex[1] = '$';
$regex[2] = '([-,., ,\t]+|^)';
$regex[3] = '(-*)';

$dictionary = [' ', 'a','b','c',
				'd','e','f',
				'g','h','i',
				'j','k','l',
				'm','n','o',
				'p','q','r',
				's','t','u',
				'v','w','x',
				'y','z']; /* Caleb Mazalevskis told me not to use chr() */
						  /* So I mapped everything */

$eval = ''; /* Code to be executed in the end; is built during parsing phase */
$code = ''; /* Code loaded from file in memory */
$log = 0;
$fstream = fopen('schema.txt', 'rb');
##############################

# Fill in our RAM
$code = fread($fstream, filesize('schema.txt'));
$code = explode(PHP_EOL, $code);

# Start parsing each instruction
# I'm using regular expressions to determine the nature of instruction
##############################
foreach($code as $line => $instr)
{
	switch($instr)
	{
		# print(
		case (preg_match("/( +|\t+|^)> /", $instr) === 1) :
		{
			$eval .= ' print("';
			$log++ ;
			
			break;
		}
		
		# characters
		case (preg_match("/(-+)/", $instr, $matches) === 1) : 
		{
			foreach($matches as $a => $b)
				$eval .= $dictionary[strlen($b)-1];
				
			break;
		}
		
		# );
		case (preg_match("/([-,., ,\t]+|^)<( +|\t+|$)/", $instr) === 1) :
		{
			if($log !== 0)
			{
				$eval .= '"); ';
				$log--;
			}
			//else
				//throw new Exception('Syntax error encountered at line: '. $line);
		
			break;
		}
	}
}

var_dump($eval);
